<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>client_socket = network_create_socket(network_socket_tcp);
connection = network_connect(client_socket, global.serverip, global.port);

if(connection == 0) {
    show_debug_message("Connected to server: " + global.serverip);
    
    sendBuffer = buffer_create(1024, buffer_grow, 1);
    buffer = buffer_create(1024, buffer_grow, 1);
    players = ds_map_create();
    localPlayerids = ds_list_create();
    
    if(ds_list_size(global.requestNames) &gt; 0) {
        show_debug_message("Requesting player(s)...");
        var i;
        for(i = 0; i &lt; ds_list_size(global.requestNames); i++) {
            buffer_seek(buffer, buffer_seek_start, 0);
            buffer_write(buffer, buffer_u8, PKT_PLAYER_REQUEST);
            buffer_write(buffer, buffer_string, ds_list_find_value(global.requestNames, i));
            network_send_packet(client_socket, buffer, buffer_tell(buffer));
        }
    } else {
        show_debug_message("Spectating");
    }
    scrInitClient();
} else {
    room_goto(rmMenu);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrStepClient(self);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var eventid = ds_map_find_value(async_load, "id");

if(client_socket == eventid){
    var data = ds_map_find_value(async_load, "buffer");
    var socket = ds_map_find_value(async_load, "id");
    buffer_seek(data, buffer_seek_start, 0);
    header = buffer_read(data, buffer_u8);
    
    switch(header) {
        case PKT_KEEP_ALIVE:
            //Nothing
        break;
        case PKT_PLAYER_REQUEST:
            pid = buffer_read(data, buffer_s16);
            playerName = buffer_read(data, buffer_string);
            player = instance_create(0, 0, objNetworkPlayer);
            player.pid = pid;
            player.name = playerName;
            
            ds_list_add(localPlayerids, pid);
            ds_map_add(players, pid, player);
            show_debug_message("Player: " + playerName + " accepted");
        break;
        case PKT_PLAYER_REQUEST_DENY:
            info = buffer_read(data, buffer_string);
            show_debug_message(info);
        break;
        case PKT_PING:
            time = buffer_read(data, buffer_u32);
            ping = current_time - time;
            show_debug_message(ping);
        break;
        case PKT_DISCONNECT:
            numPlayers = buffer_read(data, buffer_s16);
            var i;
            for(i = 0; i &lt; numPlayers; i++) {
                pid = buffer_read(data, buffer_s16);
                player = ds_map_find_value(players, pid);
                //show_debug_message(player.name + " disconnected");
                ds_map_delete(players, pid);
            }
        break;
        case PKT_UPDATE:
            //Implementation dependant
            scrUpdateClient(self, data);
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(client_socket);
buffer_delete(buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
