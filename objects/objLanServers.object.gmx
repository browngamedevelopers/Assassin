<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lan_socket = network_create_server(network_socket_udp, global.port, 10);

global.serverips = ds_list_create();
global.serverList = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var eventid = ds_map_find_value(async_load, "id");

if(lan_socket == eventid) {
    var ip = ds_map_find_value(async_load, "ip");

    var buffer = ds_map_find_value(async_load, "buffer");
    name = buffer_read(buffer, buffer_string);
    players = buffer_read(buffer, buffer_s16);
    maxPlayers = buffer_read(buffer, buffer_s16);
    
    index = ds_list_find_index(global.serverips, ip);
    if(index &lt; 0){
        str = name + ": " + ip + " | " + string(players) + "/" + string(maxPlayers); 
        ds_list_add(global.serverips, ip);
        ds_list_add(global.serverList, str);
    } else {
        str = name + ": " + ip + " | " + string(players) + "/" + string(maxPlayers); 
        ds_list_replace(global.serverList, index, str);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(lan_socket);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.5);
draw_set_color(c_gray);
draw_rectangle(10, 220, room_width-10, room_height-10, false);

draw_set_alpha(1);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_color(c_black);
draw_text(room_width / 2, 30, "Select a server or enter an IP");

var yoffset = 250;
var count = ds_list_size(global.serverList);
for(var i = 0; i &lt; count; i++) {
    str = ds_list_find_value(global.serverList, i);
    
    xl = (room_width - string_width(str)) / 2 - 5;
    xr = (room_width + string_width(str)) / 2 + 5;
    yu = yoffset - string_height(str) / 2 - 5;
    yd = yoffset + string_height(str) / 2 + 5;
    
    draw_rectangle(xl, yu, xr, yd, true);
    draw_text(room_width / 2, yoffset, str);
    yoffset += 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
