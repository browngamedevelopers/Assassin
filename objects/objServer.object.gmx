<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.maxClients = 2;
global.maxPlayers = 2;
server_socket = network_create_server(network_socket_tcp, global.port, global.maxClients);

if(server_socket &lt; 0) {
    instance_destroy();
}

show_debug_message("Server created");
buffer = buffer_create(1024, buffer_grow, 1);
sendBuffer = buffer_create(1024, buffer_grow, 1);
broadcastBuffer = buffer_create(1024, buffer_grow, 1);

clients = ds_list_create();
clientPlayers = ds_map_create();
players = ds_map_create();

var i;
playerids = ds_queue_create();
for(i = 0; i &lt; global.maxPlayers; i++){
    ds_queue_enqueue(playerids, i);
}

scrInitServer(self);
alarm[1] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Lan
buffer_seek(broadcastBuffer, buffer_seek_start, 0);
buffer_write(broadcastBuffer, buffer_string, global.serverName);
buffer_write(broadcastBuffer, buffer_s16, ds_map_size(players));
buffer_write(broadcastBuffer, buffer_s16, global.maxPlayers);
network_send_broadcast(server_socket, global.port, broadcastBuffer, buffer_tell(broadcastBuffer));

alarm[1]=60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrStartGame(self);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scrStepServer(self);
/*
var i;
for(i = 0; i &lt; ds_list_size(clients); i++) {
    var socket = ds_map_find_value(clients, i);
    scrSendInfoServer(self, socket);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var eventid = ds_map_find_value(async_load, "id");

if(server_socket == eventid) {
    var type_event = ds_map_find_value(async_load, "type");;
    
    switch(type_event) {
        case network_type_connect: 
            var socket = ds_map_find_value(async_load, "socket");
            if(ds_list_size(clients) &lt;= global.maxClients) {
                ds_list_add(clients, socket);
                ds_map_add(clientPlayers, socket, ds_list_create());
            } else {
                show_debug_message(ds_map_find_value(async_load, "ip") + " attempted to connect. Server full: " + global.maxClients + " clients");
            }
        break; 
        case network_type_disconnect: 
            var socket = ds_map_find_value(async_load, "socket");
            var clientid = ds_list_find_index(clients, socket); 
            
            if(clientid &gt;= 0) {
                var i;
                ds_list_delete(clients, clientid); 
                
                var cp = ds_map_find_value(clientPlayers, socket);
                var numcp = ds_list_size(cp);
                
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, PKT_DISCONNECT);
                buffer_write(buffer, buffer_s16, numcp);
                
                for(i = 0; i &lt; numcp; i++) {
                    var pid = ds_list_find_index(cp, i);
                    var player = ds_map_find_value(players, pid);
                    //show_debug_message(player.name + " disconnected");
                    
                    buffer_write(buffer, buffer_s16, pid);
                    ds_map_delete(players, pid);
                    ds_queue_enqueue(playerids, pid);
                }
                ds_map_delete(clientPlayers, socket);
                
                for(i = 0; i &lt; ds_list_size(clients); i++) {
                    var sock = ds_list_find_value(clients, i);
                    network_send_packet(sock, buffer, buffer_tell(buffer));
                }
            }
        break; 
    }
} else if(eventid == global.client.client_socket){
    
} else {
    var data = ds_map_find_value(async_load, "buffer");
    var socket = ds_map_find_value(async_load, "id");
    buffer_seek(data, buffer_seek_start, 0);
    header = buffer_read(data, buffer_u8);
    
    switch(header) {
        case PKT_PING:
            time = buffer_read(data, buffer_u32);
            buffer_seek(buffer, buffer_seek_start, 0);
            buffer_write(buffer, buffer_u8, PKT_PING);
            buffer_write(buffer, buffer_u32, time);
            network_send_packet(socket, buffer, buffer_tell(buffer));
        break;
        case PKT_PLAYER_REQUEST:
            if(ds_list_size(players) &lt;= global.maxPlayers) {
                var pid = ds_queue_dequeue(playerids);
                var playerName = buffer_read(data, buffer_string);

                player = instance_create(0, 0, objNetworkPlayer);
                player.name = playerName;
                player.pid = pid;
                
                show_debug_message("Player: " + playerName + " connected");
                
                var cp = ds_map_find_value(clientPlayers, socket);
                ds_list_add(cp, player.pid);
                ds_map_add(players, player.pid, player);
                
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, PKT_PLAYER_REQUEST);
                buffer_write(buffer, buffer_s16, pid);
                buffer_write(buffer, buffer_string, playerName);
                network_send_packet(socket, buffer, buffer_tell(buffer));
                
                scrSendInfoServer(self, socket);
            } else {
                show_debug_message("Server full");
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, PKT_PLAYER_REQUEST_DENY);
                buffer_write(buffer, buffer_string, "Server full");
                network_send_packet(socket, buffer, buffer_tell(buffer));
            }
        break;
        case PKT_UPDATE: 
            //Implementation dependant
            scrUpdateServer(self, socket, data);
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(server_socket);
buffer_delete(buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
